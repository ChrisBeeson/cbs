#!/usr/bin/env bash
set -euo pipefail

# CBS Agent-OS: Cell Focus Management
# Sets focus on a specific cell within the current application context

ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
CONTEXT_FILE="$ROOT_DIR/.cbs-context"

show_help() {
    echo "CBS Cell Focus Manager"
    echo ""
    echo "USAGE:"
    echo "    cbs-cell-focus <cell_name>     Focus on specific cell"
    echo "    cbs-cell-focus --list          List cells in current app"
    echo "    cbs-cell-focus --status        Show current cell focus"
    echo "    cbs-cell-focus --clear         Clear cell focus"
    echo ""
    echo "EXAMPLES:"
    echo "    cbs-cell-focus flow_ui"
    echo "    cbs-cell-focus user_service"
    echo ""
    echo "Note: Requires application context to be set first"
    echo "      Use: cbs-app-context <app_name>"
}

check_app_context() {
    if [ ! -f "$CONTEXT_FILE" ]; then
        echo "‚ùå No application context set"
        echo ""
        echo "Set application context first:"
        echo "    cbs-app-context <app_name>"
        echo "    cbs-app-context --list        # Show available apps"
        return 1
    fi
    
    source "$CONTEXT_FILE"
    if [ -z "${CBS_CURRENT_APP:-}" ]; then
        echo "‚ùå No current application in context"
        echo ""
        echo "Set application context:"
        echo "    cbs-app-context <app_name>"
        return 1
    fi
    
    local app_path="$ROOT_DIR/examples/applications/$CBS_CURRENT_APP"
    if [ ! -d "$app_path" ]; then
        echo "‚ùå Current application '$CBS_CURRENT_APP' not found"
        echo "    Expected at: $app_path"
        echo ""
        echo "Update context:"
        echo "    cbs-app-context --list"
        return 1
    fi
}

list_cells() {
    check_app_context || return 1
    source "$CONTEXT_FILE"
    
    local app_path="$ROOT_DIR/examples/applications/$CBS_CURRENT_APP"
    local cells_path="$app_path/cells"
    
    echo "üî¨ Cells in application '$CBS_CURRENT_APP':"
    echo ""
    
    if [ ! -d "$cells_path" ]; then
        echo "üì≠ No cells directory found"
        echo "    Expected at: $cells_path"
        return 1
    fi
    
    local found_cells=false
    for cell_dir in "$cells_path"/*/; do
        if [ -d "$cell_dir" ]; then
            local cell_name=$(basename "$cell_dir")
            local spec_file="$cell_dir/ai/spec.md"
            
            echo "üß¨ $cell_name"
            
            # Show cell type and description from spec
            if [ -f "$spec_file" ]; then
                local cell_type=$(grep -E "^Type:" "$spec_file" 2>/dev/null | cut -d: -f2 | xargs || echo "unknown")
                local description=$(grep -E "^Description:" "$spec_file" 2>/dev/null | cut -d: -f2- | xargs || echo "")
                
                echo "   Type: $cell_type"
                if [ -n "$description" ]; then
                    echo "   $description"
                fi
            else
                echo "   ‚ö†Ô∏è  Missing specification (ai/spec.md)"
            fi
            
            # Show message subjects
            if [ -f "$spec_file" ]; then
                local subjects=$(grep -A 10 "^Messages:" "$spec_file" 2>/dev/null | grep -E "^\s*-" | head -3 | sed 's/^\s*-\s*//' || echo "")
                if [ -n "$subjects" ]; then
                    echo "   Messages:"
                    echo "$subjects" | while read -r subject; do
                        echo "     ‚Ä¢ $subject"
                    done
                fi
            fi
            echo ""
            found_cells=true
        fi
    done
    
    if [ "$found_cells" = false ]; then
        echo "üì≠ No cells found in $cells_path"
        echo ""
        echo "Create your first cell:"
        echo "    cbs-cell-create <name> <type> <lang>"
    fi
}

show_status() {
    if [ ! -f "$CONTEXT_FILE" ]; then
        echo "üì≠ No context set"
        return 0
    fi
    
    source "$CONTEXT_FILE"
    echo "üéØ Current Cell Focus:"
    echo ""
    echo "üì¶ Application: ${CBS_CURRENT_APP:-<none>}"
    echo "üî¨ Cell: ${CBS_CURRENT_CELL:-<none>}"
    
    if [ -n "${CBS_CURRENT_CELL:-}" ] && [ -n "${CBS_CURRENT_APP:-}" ]; then
        local cell_path="$ROOT_DIR/examples/applications/$CBS_CURRENT_APP/cells/$CBS_CURRENT_CELL"
        if [ -d "$cell_path" ]; then
            echo "‚úÖ Cell focus valid"
            echo ""
            echo "üìã Cell Details:"
            local spec_file="$cell_path/ai/spec.md"
            if [ -f "$spec_file" ]; then
                echo "   Specification: $spec_file"
                local cell_type=$(grep -E "^Type:" "$spec_file" 2>/dev/null | cut -d: -f2 | xargs || echo "unknown")
                echo "   Type: $cell_type"
            fi
            echo "   Path: $cell_path"
        else
            echo "‚ùå Cell focus invalid - cell not found"
        fi
    fi
}

set_focus() {
    check_app_context || return 1
    source "$CONTEXT_FILE"
    
    local cell_name="$1"
    local cell_path="$ROOT_DIR/examples/applications/$CBS_CURRENT_APP/cells/$cell_name"
    
    if [ ! -d "$cell_path" ]; then
        echo "‚ùå Cell '$cell_name' not found in application '$CBS_CURRENT_APP'"
        echo "    Expected at: $cell_path"
        echo ""
        echo "Available cells:"
        list_cells
        return 1
    fi
    
    # Update context with cell focus
    cat > "$CONTEXT_FILE" << EOF
# CBS Agent-OS Context
# This file maintains current application and cell context for cell-based development

CBS_CURRENT_APP="$CBS_CURRENT_APP"
CBS_CURRENT_CELL="$cell_name"
CBS_WORK_MODE="cell_focused"
CBS_CONTEXT_SET_AT="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
EOF
    
    echo "‚úÖ Cell focus set to '$cell_name'"
    echo ""
    echo "üî¨ Cell Details:"
    local spec_file="$cell_path/ai/spec.md"
    if [ -f "$spec_file" ]; then
        local cell_type=$(grep -E "^Type:" "$spec_file" 2>/dev/null | cut -d: -f2 | xargs || echo "unknown")
        local description=$(grep -E "^Description:" "$spec_file" 2>/dev/null | cut -d: -f2- | xargs || echo "")
        
        echo "   Type: $cell_type"
        if [ -n "$description" ]; then
            echo "   Description: $description"
        fi
        echo "   Spec: $spec_file"
    else
        echo "   ‚ö†Ô∏è  Missing specification at $spec_file"
    fi
    echo "   Path: $cell_path"
    echo ""
    echo "Next steps:"
    echo "    cbs-cell-messages $cell_name     Show message contracts"
    echo "    cbs-work-test                    Test cell in isolation"
    echo "    cbs-work-integrate               Test with bus integration"
}

clear_focus() {
    if [ ! -f "$CONTEXT_FILE" ]; then
        echo "üì≠ No context to clear"
        return 0
    fi
    
    source "$CONTEXT_FILE"
    
    # Clear cell focus but keep app context
    cat > "$CONTEXT_FILE" << EOF
# CBS Agent-OS Context
# This file maintains current application and cell context for cell-based development

CBS_CURRENT_APP="$CBS_CURRENT_APP"
CBS_CURRENT_CELL=""
CBS_WORK_MODE="app_overview"
CBS_CONTEXT_SET_AT="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
EOF
    
    echo "‚úÖ Cell focus cleared"
    echo "üì¶ Application context maintained: $CBS_CURRENT_APP"
}

# Main command handling
case "${1:-}" in
    --help|-h)
        show_help
        ;;
    --list|-l)
        list_cells
        ;;
    --status|-s)
        show_status
        ;;
    --clear|-c)
        clear_focus
        ;;
    "")
        show_status
        ;;
    *)
        set_focus "$1"
        ;;
esac

