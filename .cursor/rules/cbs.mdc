---
description: CBS Agent Rules - Cell Body System development standards and principles
globs:
alwaysApply: true
---

# Cell Body System (CBS) Agent Rules

## CBS: A Different Way of Thinking

**CBS represents a paradigm shift in software architecture** - moving away from monolithic thinking to biological, cellular organization:

- **üß¨ Cellular Decomposition**: Break logic and UI into separate, specialized cells for total reusability and scalability
- **üîÑ Separation of Concerns**: UI cells handle presentation, logic cells handle business rules, storage cells manage data - never mixed
- **‚ôªÔ∏è Maximum Reusability**: Every cell designed to be reused across applications, features, and contexts
- **üìà Infinite Scalability**: Add new cells without affecting existing ones, scale horizontally through cell multiplication
- **üåê Distributed by Design**: Each cell operates independently, communicating only through the message bus

**Traditional monolithic thinking**: "This feature needs authentication, UI, database access, and business logic all together"

**CBS cellular thinking**: "This feature needs an auth_logic cell, auth_ui cell, user_storage cell, and session_logic cell - all communicating via bus messages"

## Core CBS Principles [[memory:8924008]]

**CELLS MUST ONLY COMMUNICATE THROUGH THE BUS - NEVER DIRECTLY**

- **üöå Bus-Only Communication**: All inter-cell communication MUST go through typed Envelope messages on the bus with `cbs.<service>.<verb>` subjects
- **üìù Spec-First Development**: Every cell requires `ai/spec.md` defining interface and behavior before implementation
- **üß© Modular Cell Design**: Cells can be large internally but must be reusable, expandable, and follow single responsibility
- **üè∑Ô∏è Typed Message Contracts**: Use typed envelopes with schema versioning (`service.verb.v1`)
- **üß™ Test-Driven**: Unit tests for logic, integration tests for bus handling

## CBS Cell Standards

### Required Cell Structure
```
applications/<app>/cells/<cell>/
  ai/spec.md          # Cell specification (required)
  lib/               # Implementation
  test/              # Tests
  pubspec.yaml       # Dependencies (Dart)
```

### Cell Categories
- **`ui`** - User interface components (Flutter, web)
- **`io`** - Input/output operations (file, network, stdio)
- **`logic`** - Business logic and data processing
- **`integration`** - External service integrations (APIs, databases)
- **`storage`** - Data persistence and caching

### Message Contract Standards
- **Subject Format**: `cbs.<service>.<verb>` (snake_case)
- **Schema Versioning**: Include version in envelope metadata
- **Envelope Structure**: JSON with `schema`, `payload`, `correlation_id`
- **Error Handling**: Publish error envelopes with clear messages

## Development Standards

### Code Quality
- Break code into manageable sized files with single responsibility
- Write concise, optimum code in as few lines as possible
- Don't delete/remove/change logic unless explicitly requested
- Avoid bloated code trying to handle rare edge cases
- Always scrutinize: are we doing it the best and simplest way with 100% effectiveness?

### Logging & State Management
- Use `log.d()`, `log.e()`, `log.i()`, `log.w()` for logging (import from '../utils/logger.dart')
- Use Riverpod for state management
- Keep logs concise with correlation IDs

### UI Standards
- All UI must fit the theme and be clean, modern with best design practices
- Use `color.withValues(alpha: 0.5)` instead of deprecated `withOpacity()`
- Proper null safety and widget lifecycle management
- Use ValueNotifier for reactive updates in CBS cells

### Documentation & Refactoring
- Include documentation on major functions and refactors
- Keep `ai/spec.md` accurate and updated when behavior changes
- When refactoring, put all associated files in a directory
- Update cell maps when making changes

## Tech Stack Integration

### Database
- Use Supabase MCP for database queries
- Don't try to run migrations - query only

### Validation Commands
```bash
# Validate single cell spec
python3 ai/scripts/validate_spec.py applications/<app>/cells/<cell>/ai/spec.md

# Validate all cells
python3 ai/scripts/validate_spec.py

# Update cell map
python3 ai/scripts/generate_cell_map.py
```

### CBS Tools Usage
```bash
cbs context <app_name>          # Set application context
cbs focus <cell_name>           # Focus on specific cell
cbs work <app> <cell>           # Start work session
cbs validate                    # Full validation suite
cbs isolation                   # Check cell isolation
```

## App-Level Cell Orchestration

### Maintaining Application Overview
When designing and refining cells and apps, maintain a clear overview of:

- **Cell Inventory**: All cells used in the application and their purposes
- **Message Flow**: How cells communicate via bus messages to achieve app functionality
- **Data Flow**: How information moves through the cellular architecture
- **Integration Points**: Where external systems connect to the cell ecosystem
- **Dependency Mapping**: Which cells depend on messages from other cells

### Application Architecture Documents
Each app should maintain:

```
applications/<app>/ai/
  cell_map.md           # Generated cell inventory and contracts
  architecture.md       # High-level app design and cell interactions
  message_flows.md      # Key business processes as message sequences
  integration_map.md    # External system connections
```

### Cell Collaboration Patterns
- **Request/Response**: UI cell ‚Üí Logic cell ‚Üí Storage cell
- **Event Broadcasting**: Logic cell publishes events, multiple cells subscribe
- **Pipeline Processing**: Data flows through sequence of processing cells
- **State Synchronization**: Multiple UI cells react to shared state changes

## Development Workflow

1. **Set Context**: Establish app/cell context before work
2. **Review Architecture**: Check app-level docs and cell interactions
3. **Review Spec**: Check `ai/spec.md` for message contracts
4. **Validate Isolation**: Ensure no direct cell dependencies
5. **Consider Impact**: How changes affect other cells via bus messages
6. **Implement Changes**: Work within cell boundaries only
7. **Test Bus Communication**: Validate proper message handling
8. **Update Contracts**: Modify specs when changing messages
9. **Update Architecture**: Reflect changes in app-level documentation
10. **Regenerate Documentation**: Update cell maps and documentation

## Quality Assurance

- If unsure about implementation, ask questions rather than guessing
- Results must be based on true facts, not assumptions
- When creating edge functions, use `supabase functions new` for correct scaffold
- Don't be overly confident - validate approaches
- Look in `docs/` folder for architecture and keep documents updated
